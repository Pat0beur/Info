
#include "voitures.h"
#include <unistd.h> // pour sleep()
#include <ctime> // pour time()

// déclaration des fonctions définies
void  initialiser(Route &r, size_t taille, int vmax);
void accelerer(Route &r), freiner(Route &r), ralentir(Route &r), deplacer(Route &r);
void ajouter(Route &r, int position), supprimer(Route &r, char Id);
void simuler(Route &r, int n);
void afficherR(Route const &r), afficherV(Route const &r, char Id);
int saVitesse(Route const &r, char Id);
bool aRalenti(Route const &r, char Id);
void setPV(Route &r, double newPV), setVMax(Route &r, int newVMax);

// Les fonctions que vous écrivez peuvent prevoir d'afficher des messages de
// debug quand cette variable globale vaut true
bool debug = true;


// Initialise la route
void initialiser(Route &r, size_t taille, int vmax) {
  r.voitures.clear();
  r.occupe.clear();
  r.occupe = vector<int> (taille);
  r.vmax = vmax;
  r.pv = 0;
}

/* Nommer une nouvelle voiture
 * Les voitures sont nommées dans l'ordre alphabétique, et de majuscule à minuscule : A-Z puis a-z
 * Renvoi la lettre de la dernière voiture créée, plus 1 (E --> Z) (Z --> a)
*/
char nommer_voiture(Route r){
  if(r.voitures.size() == 1){
    return 'A';
  }
  else{
    int code;
    code = r.voitures.at(r.voitures.size()-2).identification;
    if(code == 90){
      return char(97);
    }
    else{
      return char(code+1);
    }
  }
}

// ajouter une voiture a partir de la premiere position libre a partir d'une position donnée (pos)
void ajouter(Route &r, int pos) {
  int i=pos;
  while(r.occupe.at(i)==1){ // Trouve la prochaine case vide
    i++;
  }
  r.occupe.at(i)=1; // Met '1' dans la case correspondante pour dire qu'elle est maintenant occupé
  r.voitures.resize(r.voitures.size()+1); // Augmente de 1 la taille de voitures
  r.voitures.at(r.voitures.size()-1).position = i; // Position de la voiture correspond à l'indice de la case vide
  r.voitures.at(r.voitures.size()-1).vitesse = 0; // Vitesse = 0
  r.voitures.at(r.voitures.size()-1).identification = nommer_voiture(r); // Nomme la voiture
}

// Accélère les voitures en dessous de vmax d'une unité
void accelerer(Route &r) {
  for(int i = 0;i < r.voitures.size(); i++){ // Test pour toutes les voitures
    if(r.voitures.at(i).vitesse < r.vmax){ // Si la vitesse de la voiture est inférieure à vmax
      cout << "Acceleration pour " << r.voitures.at(i).identification << endl;
      r.voitures.at(i).vitesse++; // Augmente de 1 la vitesse de la voiture
    }
  }
}

// Affiche la route avec les voitures
void afficherR(Route const &r) {
  int i, MAX;
  MAX = r.occupe.size(); // Taille de la route

  string buf(MAX, '.'); // Initilaise buf avec des points

  // Ecriture d'une ligne d'en-tete. On modifie buf a certains endroits
  // pour mettre des + ou des |, puis on affiche buf.
  for(i=9; i < MAX; i += 10) { buf.at(i) = '|'; }
  for(i=4; i < MAX; i += 10) { buf.at(i) = '+'; }
  cout << buf << endl;

  for(i=0; i < MAX; i++){
    if(r.occupe.at(i) == 0){ // Si la case n'est pas occupé, on met un espace
      buf.at(i) = ' ';
    }
    else{
      for(int j=0 ; j<r.voitures.size() ; j++){ // Test toutes les voitures pour savoir laquelle correspond à la case occupée
        if(r.voitures.at(j).position == i){
          buf.at(i) = r.voitures.at(j).identification; // On met le nom de la voiture qui occupe la case
          break;
        }
      }
    }
  }
  cout << buf << endl;
}

//une voiture qui a d cellules vides devant elle mais une vitesse v (après
//l'étape 1) supérieure à d réduit sa vitesse à la valeur d.
void freiner(Route &r){
  for (int i = 0; i < r.voitures.size(); i++){ // Test toutes les voitures dans le vecteur voitures
    int position_actuelle = r.voitures.at(i).position;
    int position_suivante = (position_actuelle + 1) % r.occupe.size();
    int j = 0;

    while (r.occupe.at(position_suivante) == 0){ // Trouve le nombre de cellules vides (j) devant la voiture
      j++; 
      position_suivante = (position_suivante + 1) % r.occupe.size();
    }
    if (r.voitures.at(i).vitesse > j){ // Si la vitesse de la voiture est supérieure à j, réduire la vitesse à la valeur j
      cout << "Freinage de sécurité pour " << r.voitures.at(i).identification << endl; // Si une voiture freine on dit qu'elle freine
      r.voitures.at(i).vitesse = j;
    }
  }
}

// Génère un nombre aléatoire double compris entre 0 (inclus) et 1 (exclus).
double doubleRand(){
  // Convertit un nombre entier aléatoire (généré par rand()) en un double,
  // puis le divise par (RAND_MAX + 1.0) pour obtenir un résultat entre 0 et 1.
  return ((double) rand()) / (((double) RAND_MAX) + 1.0);
}

// Cette fonction réinitialise le générateur de nombres aléatoires avec une nouvelle graine.
void resetRand(bool mode){
  // Si mode est vrai (true), la fonction utilise le temps actuel (time(nullptr))
  // comme graine pour initialiser le générateur de nombres aléatoires (srand()).
  // Sinon, elle utilise la valeur 1 comme graine.
  srand(mode ? time(nullptr) : 1);
}

// Fait ralentir aléatoirement les voitures
void ralentir(Route &r){
  for(int i = 0; i < r.voitures.size(); i++){
    double random_number = doubleRand(); // Prend un nombre au hasard entre 0.0 et 1.0
    if (random_number < r.pv) { // Si le nombre aléatoire est inférieur à la probabilité alors la voiture ralenti d'une unité et ralenti = true
      if (r.voitures.at(i).vitesse > 0) {
        r.voitures.at(i).vitesse -= 1;
        r.voitures.at(i).ralenti = true;
      }
    } 
    else {
      r.voitures.at(i).ralenti = false; 
    }
  }
}

// Chaque voiture avance du nombre de cellules correspondant à sa vitesse
void deplacer(Route &r) {
  for(int i=0 ; i<r.voitures.size() ; i++){
    r.occupe.at(r.voitures.at(i).position) = 0; // Met à 0 la case avant de bouger
    r.voitures.at(i).position = r.voitures.at(i).position + r.voitures.at(i).vitesse; // Voiture avance du nombre de cases de sa vitesse
    if(r.voitures.at(i).position >= r.occupe.size()){ // Si la voiture dépasse la taille de occupe, elle repars du début
      r.voitures.at(i).position = r.voitures.at(i).position - r.occupe.size();
    }r.occupe.at(r.voitures.at(i).position) = 1; // La case d'arrivée de la voiture est maintenant occupée
  }
}

// Affiche des informations sur la voiture Id
void afficherV(Route const &r, char Id) {
  for (int i = 0; i < r.voitures.size(); i++) {
    if (r.voitures.at(i).identification == Id) {
      cout << "Voiture " << r.voitures.at(i).identification << " : " << endl;
      cout << "  Position : " << r.voitures.at(i).position << endl;
      cout << "  Vitesse : " << r.voitures.at(i).vitesse << endl;
      cout << "  Ralenti : ";
      if (r.voitures.at(i).ralenti) {
        cout << "Oui" << endl;
      }
      else {
        cout << "Non" << endl;
      }
      return;
    }
  }
}

/* fournie gracieusement */
void simuler(Route &r, int n) {
  for(int i = 0; i < n; i++) {
    accelerer(r);
    freiner(r);
    ralentir(r);
    deplacer(r);
  }
}

// Renvoi la vitesse de la voiture demandée (Id)
int saVitesse (Route const &r, char Id) {
  int res = -1; // valeur arbitraire
  for(int i = 0; i < r.voitures.size(); i++){
      if(r.voitures.at(i).identification == Id){ // Teste les identifications des voitures pour retrouver la voiture
          res = r.voitures.at(i).vitesse; // Si la voiture est trouvée alors on retourne la valeur de sa vitesse sinon la fonction retourne -1
      }
  }
  return res;
}

// Si la voiture à ralenti, renvoie true, sinon false
bool aRalenti(Route const &r, char Id) {
  bool res = false ; // valeur arbitraire
  for(int i=0 ; i<r.voitures.size() ; i++){
    if(r.voitures.at(i).identification == Id){ // Trouve la voiture correspondante à Id
      if(r.voitures.at(i).ralenti == true){
        res = true;
        break;
      }
    }
  }
  return res;
}

// Defini une probabilié pv
void setPV(Route &r, double newPV) {
  r.pv = newPV; //définie une nouvelle probabilité de freinage
}

// Défini une nouvelle vmax
void setVMax(Route &r, int newVMax) {
  r.vmax = newVMax; //définie une nouvelle vitesse max
}

// supprimer la voiture donnée, si elle existe, sinon ne fait rien
void supprimer(Route &r, char Id) {
  for (int i = 0; i < r.voitures.size(); i++) {
    if (r.voitures.at(i).identification == Id) { // Trouve la voiture à supprimer
      r.voitures.erase(r.voitures.begin() + i); // Supprimer la case correspondante
      break;
    }
  }
}



/* Quelques fonctions de test mises a disposition et la fonction main()
 * Pour réaliser les tests du fichier voitures.txt mis a dispostion, les
 * fonctions accelerer et freiner ont été modifiées pour afficher un message
 * a chaque acceleration ou freinage
 *
 * Bien sur, tant que vous n'avez rien modifié les tests sont decevants mais
 * au moins le fichier compile.
 */

void test1() {
  Route r;
  cout << "\nLancement de test1\n";
  initialiser(r, 50, 3);
  ajouter(r, 0); ajouter(r, 29); ajouter(r, 44);
  afficherR(r);
  /* a la premiere etape, l'avance sera de 1 unite, de 2 a la deuxieme et
   * de 3 a toutes les suivantes puisqu'il n'y a pas de probleme de distance
   * de securite.
   */
  simuler(r, 1);  afficherR(r);
  simuler(r, 1);  afficherR(r);
  simuler(r, 1);  afficherR(r);
  simuler(r, 15);
  afficherR(r);
  /*
  // Apres 18 unites de temps, chaque voiture doit avoir avancer de
  // 1 + 2 + 3 + 15*3 = 51 unites. A l'arrivee les voitures doivent donc
  // etre UNE position a droite de leur position de depart, avec une vitesse
  // maximale.
  */
  cout << "Fin de test1\n";
}

void test1Bis() {
  Route r;
  cout << "\n\nLancement de test1Bis\n";
  // On cree une route plus petite
  initialiser(r, 10, 3);
  afficherR(r);
  cout << "Ajout des voitures \n";
  ajouter(r, 7); ajouter(r, 0);
  afficherR(r);
  // avancerait normalement d'une cellule, puis deux, puis trois, puis trois
  // mais il n'y a que deux cases d'ecart entre les deux voitures.
  // A la troisieme acceleration la voiture A atteint une vitesse de 3 a la
  // 1ere etape mais doit freiner a cause de la distance de securite (deux
  // cellules libres avant B). Donc après cette étape A a avance de deux
  // cellules et B de 3.
  simuler(r, 3);
  afficherR(r);
  simuler(r, 12);
  // B s'est eloignee et a sa vitesse maximale. A peut accelerer une fois avant
  // d'atteindre sa vitesse maximale. Apres cela il n'y a plus ni acceleration
  // ni freinage.
  afficherR(r);
  cout << "Fin de test1Bis\n";
}

/* meme principe initial que test1Bis mais à l'ajout des voitures on laisse un
 * ecart de trois cellules entre les deux voitures. Il n'y a plus de freinage de
 * securite de A et on a 3 accelerations successives.
 * Pour epicer la simulation, après un certain nombre de pas de simulation
 * on ajoute une nouvelle voiture qui va changer la donne
 */
void test1Ter() {
  Route r;
  cout << "\n\nLancement de test1Ter\n";
  initialiser(r, 40, 3);
  afficherR(r);
  ajouter(r, 7); ajouter(r, 1);
  cout << "Ajout des voitures \n";
  afficherR(r);

  setPV(r, 0.5);
  
  simuler(r, 11);
  afficherR(r);
  // une voiture s'incruste devant A.
  cout << "On ajoute la voiture C en derniere position" << endl;
  ajouter(r, 39);
  // A a ralenti, B va devoir ralentir, puis A et B vont progressivement
  // reacceler tandis que C poursuit sa route
  for(int i=0; i < 10; i += 1) {
    afficherR(r);
    // fragment de code a decommenter quand vous aurez ecrit la
    // fonction saVitesse()
    
    cout << "Vitesses: A = " << saVitesse(r, 'A')
	 << " B = : " << saVitesse(r, 'B')
	 << " C = " << saVitesse(r, 'C')
	 << endl << endl;
    
    simuler(r, 1);
  }
  afficherR(r);
  cout << "\n\nAjout de D juste devant C" << endl;
  ajouter(r, 27);
  afficherR(r);
  for(int i = 0; i < 10; i++) { simuler(r, 1); afficherR(r); }
  cout << "Fin de test1Ter\n";
}


int main(int argc, char *argv[]) {
  test1();
  test1Bis();
  test1Ter();
  resetRand(true);


  return 0;
}
